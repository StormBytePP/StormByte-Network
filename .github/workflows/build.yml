name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        stdlib: [libstdc++, libc++]
        system-cryptopp: [ON, OFF]
        exclude:
        - compiler: gcc
          stdlib: libc++
        - stdlib: libc++
          system-cryptopp: ON # Ubuntu does not have crypto++ with libc++

    name: ${{ matrix.compiler }}-${{ matrix.stdlib }}-system-cryptopp-${{ matrix.system-cryptopp }}

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up ninja
      uses: ./.github/actions/setup-ninja

    - name: Update repository
      run: sudo apt update

    - name: Install dependencies
      run: |
        sudo apt update
        if [ "${{ matrix.compiler }}" == "gcc" ]; then
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --set gcc /usr/bin/gcc-14
          sudo update-alternatives --set g++ /usr/bin/g++-14
        elif [ "${{ matrix.compiler }}" == "clang" ]; then
          sudo apt install -y clang-19 libc++-19-dev libc++abi-19-dev clang-format-19 clang-tidy-19
          sudo update-alternatives --remove-all clang
          sudo update-alternatives --remove-all clang++
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 190 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-19
        fi
        if [ "${{ matrix.system-cryptopp }}" == "ON" ]; then
          sudo apt install -y libcrypto++-dev libcrypto++-doc libcrypto++-utils
        fi

    - name: Install CMake
      run: sudo apt install -y cmake

    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=/usr/bin/${{ matrix.compiler }} \
          -DCMAKE_CXX_COMPILER=$([[ ${{ matrix.compiler }} == 'gcc' ]] && echo '/usr/bin/g++' || echo '/usr/bin/clang++') \
          -DCMAKE_CXX_FLAGS="${{ matrix.stdlib == 'libc++' && matrix.compiler == 'clang' && '--stdlib=libc++' || '' }}" \
          -G "Ninja" \
          -DWITH_SYSTEM_STORMBYTE=OFF \
          -DENABLE_TEST=ON \
          -DGITHUB_WORKFLOW=ON \
          -DWITH_SYSTEM_CRYPTOPP=${{ matrix.system-cryptopp }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Run unit tests
      run: ctest --output-on-failure --test-dir ${{ github.workspace }}/build

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - x64

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up ninja
        uses: ./.github/actions/setup-ninja

      - name: Configure Windows environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}\build -G "Ninja" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DENABLE_TEST=ON -DWITH_SYSTEM_STORMBYTE=OFF -DGITHUB_WORKFLOW=ON -DWITH_SYSTEM_CRYPTOPP=OFF

      - name: Build
        run: cmake --build ${{ github.workspace }}\build --config ${{ env.BUILD_TYPE }}

      - name: Copy DLLs
        run: |
          Copy-Item -Path "${{ github.workspace }}\build\thirdparty\StormByte\base\lib\StormByte.dll" -Destination "${{ github.workspace }}\build\test" -Force
          Copy-Item -Path "${{ github.workspace }}\build\lib\StormByte-Network.dll" -Destination "${{ github.workspace }}\build\test" -Force

      - name: Run unit tests
        run: ctest --output-on-failure --test-dir ${{ github.workspace }}\build